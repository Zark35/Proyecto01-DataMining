import requests
import pandas as pd
import json
from sqlalchemy import create_engine
from mage_ai.data_preparation.shared.secrets import get_secret_value

if 'data_loader' not in globals():
    from mage_ai.data_preparation.decorators import data_loader

def _fetch_qb_data(realm_id, access_token, query, base_url, minor_version):
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Accept': 'application/json',
        'Content-Type': 'text/plain'
    }
    url = f"{base_url.rstrip('/')}/v3/company/{realm_id}/query"
    params = {'query': query, 'minorversion': minor_version}
    response = requests.get(url, headers=headers, params=params, timeout=60)
    response.raise_for_status()
    return response.json()

def _save_to_postgres(df: pd.DataFrame, table_name: str):
    user = get_secret_value('pg_user')
    password = get_secret_value('pg_password')
    host = get_secret_value('pg_host')
    port = get_secret_value('pg_port')
    db = get_secret_value('pg_db')
    engine = create_engine(f'postgresql://{user}:{password}@{host}:{port}/{db}')
    df.to_sql(table_name, con=engine, if_exists='replace', index=False)

def normalize_json(df: pd.DataFrame) -> pd.DataFrame:
    for col in df.columns:
        df[col] = df[col].apply(
            lambda x: json.dumps(x) if isinstance(x, (dict, list)) else x
        )
    return df

@data_loader
def load_data_from_api(*args, **kwargs):
    realm_id = get_secret_value('qb_realm_id')
    access_token = get_secret_value('qb_access_token')
    query = 'select * from Invoice'
    base_url = 'https://sandbox-quickbooks.api.intuit.com'
    minor_version = 75

    data = _fetch_qb_data(realm_id, access_token, query, base_url, minor_version)
    invoices = data['QueryResponse'].get('Invoice', [])
    df = pd.DataFrame(invoices)
    df = normalize_json(df)
    _save_to_postgres(df, 'raw_invoices')
    return {"records_extracted": len(df)}
